
ext.localLibDir = file(localLibDirPath)
ext.javaVersion = "${javaVersion}"
ext.javadocLang = System.properties['user.language']

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import java.nio.charset.StandardCharsets

allprojects {
	apply plugin: 'java-library'

	group "org.iplass"

	java {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
	}

	repositories {
		mavenCentral()
	}
	
	javadoc {
		options.encoding = 'UTF-8'
		options.docEncoding = 'UTF-8'
		options.memberLevel = 'PACKAGE'
		failOnError = false

		// https://issues.gradle.org/browse/GRADLE-1228
		if (System.properties['http.proxyHost'] != null ) {
			options.jFlags(
				'-Dhttp.proxyHost=' + System.properties['http.proxyHost'],
				'-Dhttp.proxyPort=' + System.properties['http.proxyPort']
			)
		}
	}

	tasks.withType(AbstractCompile) {
		options.encoding = 'UTF-8'
	}

	tasks.withType(GroovyCompile) {
		options.encoding = 'UTF-8'
	}
}

subprojects { subproject ->
	apply from: '../sharedlibs.gradle'
	
	configurations.all {
		globalExcludes.each {
			exclude group: it.group, module: it.module
		}
	}
	
	jar {
		into('META-INF') {
			from "$rootDir/LICENSE"
		}
		manifest {
			attributes 'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})"
			attributes 'Implementation-Title': subproject.name
			attributes 'Implementation-Version': project.version
			attributes 'Implementation-Vendor': vendor
			attributes 'Build-Date': new Date().format('yyyy/MM/dd HH:mm:ss')
		}
	}

	def buildJavadocSourceLangDir = layout.buildDirectory.dir("docSrc/${javadocLang}")
	def buildJavadocLangDir = java.docsDir.dir("javadoc/${javadocLang}")

	task allDeps(type: DependencyReportTask) {}
	
	task copyJavadocJava(type: Copy) {
		from sourceSets['main'].allJava
		into buildJavadocSourceLangDir

		filteringCharset 'UTF-8'
		filter { String line ->
			line.replaceAll('<([\\$])', '%lt;$1')
				.replaceAll('\\$([\\{])', '\\\\\\$$1')
				.replaceAll('([^\\\\|^\'])\\$', '$1\\\\\\\\\\$')
		}
	}

	task processJavadocJava(dependsOn: copyJavadocJava) {
		doLast {
			def docSrcs = fileTree(buildJavadocSourceLangDir)
			docSrcs.each {
				def reader = Files.newBufferedReader(Paths.get(it.getCanonicalPath()), StandardCharsets.UTF_8)
				def template = new groovy.text.StreamingTemplateEngine().createTemplate(reader)

				def tempPath = Files.createTempFile(Paths.get(it.getParent()), null, null)
				def writer = Files.newBufferedWriter(tempPath, StandardCharsets.UTF_8)

				writer.write(template.make([doclang : javadocLang]))

				reader.close()
				writer.close()

				Files.move(tempPath, Paths.get(it.getCanonicalPath()), StandardCopyOption.REPLACE_EXISTING)
			}
		}
	}

	task javadocI18n(type: Javadoc, dependsOn: processJavadocJava) {
		source buildJavadocSourceLangDir
		destinationDir file(buildJavadocLangDir)

		options.encoding = 'UTF-8'
		options.docEncoding = 'UTF-8'
		options.memberLevel = 'PACKAGE'
		options.jFlags "-Duser.language=${javadocLang}"

		classpath += project.sourceSets['main'].compileClasspath

		// https://issues.gradle.org/browse/GRADLE-1228
		if (System.properties['http.proxyHost'] != null ) {
			options.jFlags(
				'-Dhttp.proxyHost=' + System.properties['http.proxyHost'],
				'-Dhttp.proxyPort=' + System.properties['http.proxyPort']
			)
		}

		failOnError = false
	}
}

//public api
javadoc {
	source(project(':iplass-core').sourceSets['main'].allJava)
	source(project(':iplass-web').sourceSets['main'].allJava)
	source(project(':iplass-gem').sourceSets['main'].allJava)
	source(project(':iplass-test').sourceSets['main'].allJava)
	exclude 'META-INF/**'
	exclude 'org/iplass/adminconsole/**'
	exclude 'org/iplass/gem/**'
	exclude '**/impl/**'

	classpath += project(':iplass-core').sourceSets['main'].compileClasspath
	classpath += project(':iplass-web').sourceSets['main'].compileClasspath
	classpath += files(project(':iplass-web').sourceSets['main'].allJava.srcDirs)
	classpath += project(':iplass-gem').sourceSets['main'].compileClasspath
	classpath += project(':iplass-test').sourceSets['main'].compileClasspath
	classpath += files(project(':iplass-test').sourceSets['main'].allJava.srcDirs)

	failOnError = false
}

def rootBuildJavadocSourceLangDir = layout.buildDirectory.dir("docSrc/${javadocLang}")
def rootBuildJavadocLangDir = java.docsDir.dir("javadoc/${javadocLang}").get().getAsFile()

task copyJavadocJava(type: Copy) {
	from project(':iplass-core').sourceSets['main'].allJava
	from project(':iplass-web').sourceSets['main'].allJava
	from project(':iplass-gem').sourceSets['main'].allJava
	from project(':iplass-test').sourceSets['main'].allJava
	into rootBuildJavadocSourceLangDir
	exclude 'META-INF/**'
	exclude 'org/iplass/adminconsole/**'
	exclude 'org/iplass/gem/**'
	exclude '**/impl/**'

	filteringCharset 'UTF-8'
	filter { String line ->
		line.replaceAll('<([\\$])', '%lt;$1')
			.replaceAll('\\$([\\{])', '\\\\\\$$1')
			.replaceAll('([^\\\\|^\'])\\$', '$1\\\\\\\\\\$')
	}
}

task processJavadocJava(dependsOn: copyJavadocJava) {
	doLast {
		def docSrcs = fileTree(rootBuildJavadocSourceLangDir)
		docSrcs.each {
			def reader = Files.newBufferedReader(Paths.get(it.getCanonicalPath()), StandardCharsets.UTF_8)
			def template = new groovy.text.StreamingTemplateEngine().createTemplate(reader)

			def tempPath = Files.createTempFile(Paths.get(it.getParent()), null, null)
			def writer = Files.newBufferedWriter(tempPath, StandardCharsets.UTF_8)

			writer.write(template.make([doclang : javadocLang]))

			reader.close()
			writer.close()

			Files.move(tempPath, Paths.get(it.getCanonicalPath()), StandardCopyOption.REPLACE_EXISTING)
		}
	}
}

task javadocI18n(type: Javadoc, dependsOn: processJavadocJava) {
	source rootBuildJavadocSourceLangDir
	exclude('**/impl/**')
	destinationDir file(rootBuildJavadocLangDir)

	classpath += project(':iplass-core').sourceSets['main'].compileClasspath
	classpath += project(':iplass-web').sourceSets['main'].compileClasspath
	classpath += files(project(':iplass-web').sourceSets['main'].allJava.srcDirs)
	classpath += project(':iplass-gem').sourceSets['main'].compileClasspath
	classpath += project(':iplass-test').sourceSets['main'].compileClasspath
	classpath += project(':iplass-admin').sourceSets['main'].compileClasspath
	classpath += files(project(':iplass-test').sourceSets['main'].allJava.srcDirs)

	options.encoding = 'UTF-8'
	options.docEncoding = 'UTF-8'
	options.memberLevel = 'PACKAGE'
	options.jFlags "-Duser.language=${javadocLang}"

	failOnError = false
}

//Release
buildscript {
	repositories {
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}
	dependencies {
		classpath "net.researchgate:gradle-release:${gradleReleasePluginVersion}"
	}
}
apply plugin: 'net.researchgate.release'

if (project.hasProperty('releaseBranch')) {
	task releaseBuild {
		subprojects {
			dependsOn it.tasks.build
			dependsOn it.tasks.jar
			dependsOn it.tasks.javadoc
		}
	}

	release {
		failOnCommitNeeded = true
		failOnPublishNeeded = true
		failOnSnapshotDependencies = true
		failOnUnversionedFiles = true
		failOnUpdateNeeded = true
		revertOnFail = true
		preCommitText = ''
		preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
		tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
		newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
		tagTemplate = '${version}'
		versionPropertyFile = 'gradle.properties'
		versionProperties = []
		buildTasks = ['releaseBuild']
		scmAdapters = [
			net.researchgate.release.GitAdapter,
		]

		git {
			requireBranch.set(project.property('releaseBranch'))
			pushToRemote.set('origin')
			pushToBranchPrefix.set('')
			commitVersionFileOnly.set(false)
			signTag.set(false)
		}
	}
}
