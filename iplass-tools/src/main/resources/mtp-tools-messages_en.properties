#Generated by ResourceBundle Editor (http://essiembre.github.io/eclipse-rbe/)
# Copyright (C) 2017 DENTSU SOKEN INC. All Rights Reserved.
#
# Unless you have purchased a commercial license,
# the following license terms apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

common.errorMsg = An unexpected error has occurred. : {0}

entityport.csv.generateErr      = An error has occurred in the generation of the Entity.
entityport.csv.headErr          = Number of columns of data and the number of columns in the header is different, line: {0}
entityport.csv.headReadErr      = An error occurred while reading the header information.
entityport.csv.notDefinedHead   = Header information is not defined.
entityport.csv.notExistProp     = {0} is a property that does not exist on {1}.
entityport.csv.notExistPropWarn = [{0}] : Contains properties that do not exist in the CSV file, but it will ignore. {1}
entityport.csv.readErr          = An error occurred while reading a row of data, line:{0}  {1}

entitytool.createDirectoriesError  = An error occurred while creating the directory.
entitytool.errorOutputSearchResult = An error occurred in the output of search results.
entitytool.invalidEQLStatement     = EQL statement is invalid. : eql = {0}
entitytool.unexpectedError         = An unexpected error occurred.

metaport.canNotGetMeta                            = [{0}] : Metadata information specified is I can not get.
metaport.canNotParsed                             = MetaData definition cannot be parsed. {0}
metaport.causeTitle                               = Cause : {0}
metaport.clearAllMetaDataContext                  = Clear all the context of metadata.
metaport.entityPropertyCheck                      = An entity containing properties with the same property name but different IDs has been selected.
metaport.errorCheckMetaData                       = An error occurred during a metadata consistency check.
metaport.errorImportMetaData                      = [{0}] : An error occurred during the import process.
metaport.insertMeta                               = [{0}] : Insert.
metaport.logTitle                                 = Logs until now
metaport.reloadTenantContext                      = Reload the context of the tenant.
metaport.removeMeta                               = [{0}] : Remove.
metaport.statusCanNotInsertWithSharedDelete       = Since registered data for Path is shared data, it can not be added.
metaport.statusCanNotInsertWithSharedDeleteDetail = Can not add, because of the registered data for the Path of additional data of the shared data.\nEither remove the registered share data that matches the Path, please change the Path.\nAdd path={1}\nAdd data ID={0}\nPath matched share data ID={2}
metaport.statusCanNotOverwrite                    = Registered metadata ID match can not be changed because the overwriting is prohibited.
metaport.statusCanNotOverwriteDetail              = Registered metadata ID match can not be changed because the overwriting is prohibited.\nIf you take in, please change the ID and the Path to another.\nChanged data ID={0}\nTarget path={1}
metaport.statusCanNotRenameSharedData             = Share meta data can not change the Path.
metaport.statusCanNotRenameSharedDataDetail       = Share meta data can not change the Path.\nIf you take in, please to match the Path.\nChanged data ID={0}\nPrevious path={1}\nAfter path={2}
metaport.statusCanNotRenameWithSharedDelete       = For registered data is shared data for the Path after the target data changes, you can not change the name.
metaport.statusCanNotRenameWithSharedDeleteDetail = For registered data is shared data for the Path after the target data changes, you can not change the name.\nEither remove the registered share data that matches the Path after the change, please change the Path.\nChanged data ID={0}\nPrevious path={1}\nAfter path={2}\nPath matched share data ID={3}
metaport.statusCheckInconsistencyWarning          = The following inconsistencies may have occurred in the imported metadata.
metaport.statusCheckInstruction                   = For more information, please see StatusCheck.
metaport.statusIncludeTenant                      = include tenant information.
metaport.statusIncludeTenantDetail                = Tenant information is included. \nIf you import, you need to select the property.
metaport.statusIncludeUnMatchTenant               = include tenant information (name unmatch).
metaport.statusIncludeUnMatchTenantDetail         = include tenant information (name unmatch). \nWhen importing you must select the property.
metaport.statusInsertWithCombi                    = Add the metadata.
metaport.statusInsertWithCombiDetail              = Add the metadata. Registered data that matches the Path is, will change the Path by another import data.\nIf you do not want to import the metadata that matches the Path of the registered data at the same time, you try to delete the registered data.\nAdd path={1}\nAdd data ID={0}\nAnother data ID={2}\nAnother data changed path={3}
metaport.statusInsertWithDelete                   = Add the metadata.
metaport.statusInsertWithDeleteDetail             = Add the metadata. Registered data that matches the Path, it will delete.\nAdd path={1}\nAdd data ID={0}\nDelete data ID={2}
metaport.statusRename                             = Update the existing metadata (name changed).
metaport.statusRenameDetail                       = Update the existing metadata (name changed).\nChanged data ID={0}\nPrevious path={1}\nAfter path={2}
metaport.statusRenameWithCombi                    = Update the existing metadata (name changed).
metaport.statusRenameWithCombiDetail              = Update the existing metadata (name changed). About the registered data that matches the Path after the change, it will change the Path by another import data.\nIf you can not import the metadata that matches the Path after the change at the same time, you try to delete the registered data.\nChanged data ID={0}\nPrevious path={1}\nAfter path={2}\nAnother data ID={3}\nAnother data changed path={4}
metaport.statusRenameWithDelete                   = Update the existing metadata (name changed).
metaport.statusRenameWithDeleteDetail             = Update the existing metadata (name changed). Registered data that matches the Path after the change it will delete.\nChanged data ID={0}\nPrevious path={1}\nAfter path={2}\nDelete data ID={3}
metaport.tenantImport                             = [{0}] : Updated the part of the Tenant metadata.
metaport.tenantImportSkip                         = [{0}] : Tenant metadata skipped import.
metaport.updateMeta                               = [{0}] : Update.
metaport.updateMetaDataContext                    = Context of metadata was updated only target.

pack.canNotParse             = I can not parse the file. Contains an unknown file. {0}
pack.canNotParseCorrupted    = I can not parse the file. The file may be corrupted.
pack.cantImportEntity        = [{0}] : Can not import data for [{0}].
pack.completedCreatePackage  = The create of the Package is complete. : name = {0}
pack.completedExportEntity   = The export of the Entity data is complete.
pack.completedExportMetaData = The export of the metadata is complete.
pack.errorOutputMetaData     = [{0}] : Error.
pack.fileCorrupted           = The file may be corrupted. Target File = {0}
pack.nonTargetEntity         = Entity data is not a export target.
pack.nonTargetMetaData       = Metadata is not a export target.
pack.notFoundEntityDef       = [{0}] : We can not acquire the specified Entity information.
pack.outputEntity            = [{0}] : Complete. ({1})
pack.outputMetaData          = [{0}] : Complete.
pack.skipExportEntity        = [{0}] : skipped because Entity data definition can not be acquired.
pack.skipNonSupportEntity    = [{0}] : skipped because specified Entity is not supported.
pack.startExportEntity       = Start the export of Entity data.
pack.startExportMetaData     = Start the export of metadata.
pack.warningOutputMetaData   = [{0}] : Warning.

storagespace.failedChangeStorageSpace  = StorageSpace change failed. : Source = {0}, Destination = {1}
storagespace.failedImportEntityCSVData = Import of Entity's CSV data failed.
storagespace.noStorageSpace            = StorageSpace name({0}) of definition can not be found in the service-config.
storagespace.sameTableNamePostfix      = Data storage location ({0}) is the same as before migration; check StorageSpace name and pseudo-partition location.
storagespace.unexpectedError           = An unexpected error occurred.

tenant.create.completedCreateBlankMsg          = Completed a blank Tenant create.
tenant.create.completedCreateTenantMsg         = Completed a Tenant create.
tenant.create.createdAdminMsg                  = Created an Admin User. : id = {0}
tenant.create.createdAppAdminRole              = Created the AppAdmin role.
tenant.create.createdGemUserRole               = Created the GemUser role.
tenant.create.createdMenuMsg                   = Created a Menu. : name = {0}
tenant.create.createdTenantInfoMsg             = Created a Tenant information. : id = {0}
tenant.create.createdTenantMetaMsg             = Created a Tenant meta data. : id = {0}
tenant.create.createdTopViewMsg                = Created a TopView. : name = {0}
tenant.create.existsURLMsg                     = Input URL is already exists. : url = {0}
tenant.create.updatedTenantMetaMsg             = Updated a Tenant meta data. : id = {0}
tenant.delete.deletedTableMsg                  = Deleted the {0} data. ({1})
tenant.delete.deletingTableMsg                 = Deleting the {0} data. ({1})
tenant.partition.createExistTenantPartitionMsg = Add the partition because there is no Partition to the tenant ({0}) .
tenant.partition.createdPartitionMsg           = Created a Partition. : name = {0}
tenant.partition.droppedPartitionMsg           = Dropped the Partition. : name = {0}
tenant.partition.skipDropPartitionMsg          = Skip drop Partition because {0} does not exist.
tenant.partition.skipPartitionMsg              = Skip the creation process, because it already has partition to {0} exists.: table = {1}
